t(coefs[2:3,1]) %*% cov(cbind(x1,x2)) %*% coefs[2:3,1]
rm(list=ls())
setwd("~/Documents/GitHub/BIOS14/ANCOVA")
plants = read.csv('alpineplants.csv')
head(plants)
head(plants)
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
summary(m)
#take only the temp+snow
m2 = lm(plants$Carex.bigelowii ~ plants$mean_T_winter + plants$mean_T_summer + plants$snow)
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
summary(m3)
summary(m2)
summary(m1)
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
summary(m1)
#observing the t value
t1 = summary(m1$coefficients)
t1
summary(m1)
#observing the t value
coefs1 = summary(m1)$coef
coefs1
t1=coefs1[1:11,3]
t1
#observing the t value
t1 = summary(m1)$coef[1:11,3]
t1
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
t2 = summary(m2)$coef[1:11,3]
t2 = summary(m2)$coef[1:9,3]
t2 = summary(m2)$coef[1:8,3]
summary(m2)
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
t2 = summary(m1)$coef[1:9,3]
t2
t2 = summary(m2)$coef[1:9,3]
t2 = summary(m2)$coef[1:8,3]
t2
m3 = update(m1, .~. -plants$max_T_winter-plants$min_T_winter-plants$light)
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
#observing the t value, remove the number that is closest to 0 because it doesnt make much sense? idk what am i writing
t1 = summary(m1)$coef[1:11,3]
t3 = summary(m3)$coef[1:8,3]
t3
t2
t3 = summary(m3)$coef[1:6,3]
summary(m3)
summary(m2)
summary(m1)
m2 = update(m1, .~. -plants$max_T_winter-plants$min_T_winter) #-plants$light
summary(m2)
m3 = update(m2, .~. -plants$snow-plants$soil_moist-plants$max_T_summer-plants$min_T_summer)
summary(m3)
m4 = lm(plants$Carex.bigelowii ~ plants$mean_T_winter + plants$mean_T_summer)
summary(m4)
m3 = update(m2, .~. -plants$snow-plants$soil_moist-plants$mean_T_winter-plants$mean_T_summer)
summary(m3)
m3 = update(m2, .~. -plants$snow-plants$soil_moist-plants$mean_T_summer)
summary(m3)
summary(m3)
source("~/Documents/GitHub/BIOS14/ANCOVA/ANCOVA.R")
summary(m3)
m4 = update(m4, .~. -plants$max_T_summer -plants$mean_T_winter)
summary(m4)
m4 = update(m3, .~. -plants$max_T_summer -plants$mean_T_winter)
summary(m4)
install.packages("car")
cor(m1,use = "everything", method = "pairwise")
cor(m1,use = "everything")
pairs(plants, panel = 'panel.smooth')
pairs(plants, panel = 'panel.smooth')
pairs(plants, panel = 'panel.smooth')
pairs(plants, panel = 'panel.smooth')
graph1 = pairs(plants, panel = 'panel.smooth')
pairs(plants, panel = 'panel.smooth')
#would remove mean winter and mean summer
m2 = update(m1, .~., -plants$mean_T_winter -plants$mean_T_summer)
library(car)
install.packages("carData")
install.packages("carData")
library(car)
install.packages("carData")
vif(m2)
install.packages("car")
library(car)
library(car)
install.packages('car')
install.packages("car")
library(car)
install.packages('car')
install.packages("car")
vif(m1)
vif(m1)
library(car)
libray(car)
install.packages("carData")
install.packages("carData")
vif(m1)
vif(m1)
install.packages("carData", dependencies = FALSE)
install.packages("car", dependencies = FALSE)
vif(m1)
install.packages("car")
library(car)
vif(model2)
install.packages("car")
library(car)
vif(m1)
install.packages("car")
vif(m1)
library(car)
vif(m1)
library(car)
vif(m1)
vif(m1)
vif(m1)
vif(m2)
#would remove mean winter and mean summer
m2 = update(m1, .~., -plants$mean_T_winter -plants$mean_T_summer)
vif(m2)
vif(m2)
m2
m1
#would remove mean winter and mean summer
m2 = update(m1, .~. -plants$mean_T_winter-plants$mean_T_summer)
m2
vif(m2)
rm(list=ls())
plot(r0,K)
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(r0,K,type='line')
plot(r0,type='line')
plot(K,type='line')
plot(a)
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
a[i]=r0*i(1-(n/K))
plot(a)
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a,type='line')
plot(a,type='line',xlab='n',ylab='dn/dt')
abline(h=0)
plot(a,type='line',xlab='n', xlim=150,ylab='dn/dt',)
plot(a,type='line',xlab='n', xlim=c(0,150),ylab='dn/dt',)
plot(a,type='line',xlab='n', xlim=c(0,150),ylab='dn/dt', ylim=c(-20,30))
abline(h=0)
plot(a,type='line', abline(h=0),
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
plot(a,type='line', abline(h=0),
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
plot(a,type='line',
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a, type='line',
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
plot(a , type='line',xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
plot(a) #, type='line',xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
plot(a , type='line')#,xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
line(a,xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
line(a,xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
line(a,xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
plot(a,xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
plot(a, xlab='n', xlim=c(0,150), ylab='dn/dt', ylim=c(-20,30))
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a,
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a, type = 'l'
xlab='n', xlim=c(0,150),
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a, type = 'l',
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
abline(h=0)
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (i in 0:150) {
a[i+1]=r0*i*(1-(i/K))
}
plot(a, type = 'l',
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
abline(h=0)
abline(h=0)
plot(a, type = 'l',
xlab='n', xlim=c(0,150),
ylab='dn/dt', ylim=c(-20,30))
abline(h=0)
a[i+1]=r0*i*(1-(i/K))
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (i in 0:150) {
a[i+1]=r0*i*(1-(i/K))
}
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
a[n+1]=r0*n*(1-(n/K))
for (t in 0:20) {
a2[t+1]=K/(1+((K/1)-1)*exp(1)^(-r0*t))
}
plot(a2)
plot(a2, type = 'l')
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a2, type = 'l')
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (t in seq(0,20,by=0.01)) {
a2[t+1]=K/(1+((K/1)-1)*exp(1)^(-r0*t))
}
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (t in seq(0,20,by=0.1)) {
a2[t+1]=K/(1+((K/1)-1)*exp(1)^(-r0*t))
}
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
plot(a2, type = 'l',
xlab='time', xlim=c(0,20),
ylab='n', ylim=c(0,100))
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
c(2,3,7)
diff(c(2,3,7))
#3
a3=diff(a2)
plot(a3,a2)
plot(a2,a3)
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (t in seq(0,20)) {
a2[t+1]=K/(1+((K/1)-1)*exp(1)^(-r0*t))
}
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (t in 0:20)) {
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (t in 0:20) {
a2[t+1]=K/(1+((K/1)-1)*exp(1)^(-r0*t))
}
a4=diff(a)
a3[20]
source("~/Documents/GitHub/BIOS13/Dynamic System/Programming dynamic systems.R")
for (t in 0:150) {
a2[t+1]=K/(1+((K/1)-1)*exp(1)^(-r0*t))
}
a3[150]
a3[151]=0
plot(a3,a2)
plot(a2,a3)
plot(a2,a3,type='l')
plot(a,a3,type='l')
plot(a2,a3,type='l', xlab='population in time', ylab='differences of population in time')
plot(a,a3,type='l',xlim=c(0,150))
plot(a,a3,type='l',xlim=c(0,20))
plot(a,a3,type='l',xlim=c(0,20), xlab='population in time')
rm(list=ls())
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
r0=1
K=100
source("~/.active-rstudio-document")
plot(population)
View(population)
source("~/.active-rstudio-document")
View(population)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(population)
plot(population, type='l')
source("~/.active-rstudio-document")
plot(x, v_b, type="l", xlab="Probability", ylab="Theoretical variance", las=1)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
hist(x,v_b)
hist(x)
hist(v_b)
rm(list=ls())
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
hist(x, las=1)
hist(logit_x, las=1)
hist(x, las=1)
hist(logit_x, las=1)
set.seed(1)
logit = function(x) {log(x/(1-x))} #no need return because it will return the last value i think?
invlogit = function(x) {1/(1+exp(-x))}
x = runif(200) #runif produce random number, does not stand for run if
logit_x = logit(x)
par(mfrow=c(2,2)) #for ploting, two row two col
hist(x, las=1)
hist(logit_x, las=1)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
xx = seq(-5, 5, 0.01)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(x, y, las=1)
source("~/.active-rstudio-document")
plot(c(1,2),c(2,3),type='l')
plot(c(1,2),c(2,3),type='l')
plot(c(0,0),c(1,1),type='l')
plot(c(0,5),c(1,1),type='l')
abline(y=1)
abline(h=1)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
LV_isoclines(1,1,2)
rm(list=ls())
LV_isoclines = function(r,a,mu){
abline(h=r/a)
abline(v=mu/a)
}
plot(c(0,1),c(1,1),type='l')
plot(c(0,0),c(1,1),type='l')
plot(c(0,6),c(1,1),type='l')
plot(c(1,2),c(0,2),type='l')
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
plot()
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
plot(abline(h=r/a))
plot(0,0)
plot(0,0,type='l')
LV_isoclines(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
LV_isoclines(1,1,2)
abline(h=r/a)
abline(v=mu/a)
abline(v=1)
source("~/.active-rstudio-document")
plot.new(abline(v=1))
plot(y~x, data=df)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(y~x, data=df)
abline(v=1)
plot(c(0,0),c(0,0))
abline(v=1)
plot(c(0,0),c(0,0),type='l')
abline(v=1)
plot.new()
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
abline(h=1)
source("~/.active-rstudio-document")
abline(v=2)
plot.new()
source("~/.active-rstudio-document")
LV_isoclines(1,1,2)
LV_isoclines(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
LV_isoclines(1,1,2)
install.packages("deSolve", dependencies = FALSE)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
P = c(1,1,2)
out
plot( out[,1], out[,2], type=’l’, col=’blue’ )
plot( out[,1], out[,2], type='l', col='blue')
lines( out[,1], out[,2], col='red' )
plot( out[,1], out[,2], type='l', col='blue')
lines( out[,1], out[,2], col='red' )
plot( out[,1], out[,2], type='l', col='blue')
lines( out[,1], out[,2], col='red' )
plot( out[,1], out[,2], type='l', col='blue')
lines( out[,1], out[,2], col='red' )
lines( out[,1], out[,3], col='red' )
plot( out[,1], out[,2], type='l', col='blue')
lines( out[,1], out[,3], col='red' )
LV_sys <- function(t, np, Parameters) {
# extract vector content:
n <- np[1]
p <- np[2]
r <- Parameters[1]
a <- Parameters[2]
mu <- Parameters[3]
# calculate the two growth rates:
dndt <- r*n - a*n*p
dpdt <- a*n*p - mu*p
return(list(c(dndt, dpdt ))) # the result as a vector in a list
}
library(deSolve)
np0 = c(1.5,0.5)
timevec = seq(0:10)
P = c(1,1,2)
out <- ode( y = np0, func = LV_sys, times = timevec, parms = P)
plot( out[,1], out[,2], type='l', col='blue')
lines( out[,1], out[,3], col='red' )
plot( out[,1], out[,2], type='l', col='blue', ylim=c(0,3))
lines( out[,1], out[,3], col='red' )
jab(1,1,2)
jab = function(r,a,mu) {
m = cbind(0,-a*mu)
m = cbind(a*r,0)
return(m)
}
jab(1,1,2)
jab(1,1,2)
jab = function(r,a,mu) {
m = cbind(0,-a*mu)
#m = cbind(a*r,0)
return(m)
}
jab(1,1,2)
jab = function(r,a,mu) {
m = NULL
m = cbind(0,-a*mu)
m = cbind(a*r,0)
return(m)
}
jab(1,1,2)
jab = function(r,a,mu) {
m = cbind(c(0,-a*mu), m)
m = cbind(c(a*r,0), m)
return(m)
}
jab(1,1,2)
jab = function(r,a,mu) {
m = NULL
m = cbind(c(0,-a*mu), m)
m = cbind(c(a*r,0), m)
return(m)
}
jab(1,1,2)
View(out)
plot(out[,1]), out[,3])
plot(out[,1]), out[,3], type='l')
plot( out[,1], out[,3], type='l')
plot( out[,2], out[,3], type='l')
plot( out[,2], out[,3], type='l')
View(out)
plot( out[,2], out[,3])
plot( out[,2], out[,3], type "b")
plot( out[,2], out[,3], type="b")
plot( out[,2], out[,3])
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
plot( out[,2], out[,3],type='l')
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
plot( out[,2], out[,3],type='l')
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
plot( out[,2], out[,3],type='l')
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
line( out[,1], out[,2], type='l', col='blue')
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
line( out[,1], out[,2], col='blue')
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
#1c
jab = function(r,a,mu) {
m = NULL
m = cbind(c(0,-a*mu), m)
m = cbind(c(a*r,0), m)
return(m)
}
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
jab(1,1,2)
jab(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
jab(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
jab(1,1,2)
source("~/Documents/GitHub/BIOS13/MDS/MDS1.R")
jab(1,1,2)
#1d
eigen(jab(1,1,2))
t=2*pi/abs(Im(e$value[1]))
#1d
e=eigen(jab(1,1,2))
t=2*pi/abs(Im(e$value[1]))
t
