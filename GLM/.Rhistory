x2 = rnorm(200, 10, 3)
set.seed(1)
x2 = rnorm(200, 10, 3)
set.seed(1)
x2 = rnorm(200, 10, 3)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
plot(x2, eta, las=1)
plot(x2, y2, las=1)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
m = glm(y2~x2, family="poisson")
summary(m)
plot(x1, y2, las=1, col="darkgrey", pch=16)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
plot(x1, y2, las=1, col="darkgrey", pch=16)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x=xx), type="response", se.fit=T)
lines(xx, y_hat$fit)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
r.squaredGLMM(m)
r.squaredGLMM(m)
library(lme4)
library(lme4)
r.squaredGLMM(m)
install.packages("lme4", dependencies = FALSE)
library(lme4)
r.squaredGLMM(m)
r.squaredGLMM(m)
install.packages("Matrix", dependencies = FALSE)
library(Matrix)
library(lme4)
r.squaredGLMM(m)
install.packages("MuMIn", dependencies = FALSE)
r.squaredGLMM(m)
library(MuMIn)
r.squaredGLMM(m)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
m$deviance
m$null.deviance
summary(m)
source("~/overdispresion.R")
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
set.seed(1)
x = rnorm(200, 10, 3)
eta = -2 + 0.2*x
y = floor(exp(eta + rnbinom(200, 1, mu=.8)))
par(mfrow=c(1,2))
plot(x, eta, las=1)
plot(x, y, las=1)
source("~/overdispresion.R")
summary(m)
install.packages("MASS", dependencies = FALSE)
library(MASS)
m = glm.nb(y~x)
summary(m)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
plot(x2, y2, las=1, col="darkgrey", pch=16)
xx = seq(min(x2), max(x2), 0.01)
y_hat = predict(m, newdata=list(x2=xx), type="response", se.fit=T)
#predict function to obtain the predicted values on the data scale, and to construct a 95% confidence polygon.
lines(xx, y_hat$fit)
#lines(xx, y_hat$fit+1.96*y_hat$se.fit, lty=2)
#lines(xx, y_hat$fit-1.96*y_hat$se.fit, lty=2)
polygon(c(xx, rev(xx)),
c(y_hat$fit+1.96*y_hat$se.fit,
rev(y_hat$fit-1.96*y_hat$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
library(lme4)
library(MuMIn)
r.squaredGLMM(m)
1-(m$deviance/m$null.deviance)
summary(m)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
#####
set.seed(1)
x2 = rnorm(200, 10, 3)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
par(mfrow=c(1,2))
plot(x2, eta, las=1)
plot(x2, y2, las=1)
m = glm(y2~x2, family="poisson")
summary(m)
#####
set.seed(1)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
x2 = rnorm(200, 10, 3)
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
summary(m)
eta = -2 + 0.2*x2
y2 = ceiling(exp(eta + rpois(200, 0.3)))
source("~/Documents/GitHub/BIOS14/GLM/Possion.R")
summary(m)
source("~/overdispresion.R")
source("~/overdispresion.R")
source("~/overdispresion.R")
source("~/.active-rstudio-document")
setwd("~/Documents/GitHub/BIOS14/GLM")
source("~/Documents/GitHub/BIOS14/GLM/ExercisePossion.R")
rm(list=ls())
dat = read.csv("Eulaema.csv")
plot(dat$MAT~dat$Eulaema_nigrita)
plot(dat$MAT~dat$Eulaema_nigrita, las=1)
plot(dat$Eulaema_nigrita~dat$MAT, las=1)
plot(dat$altitude~dat$Eulaema_nigrita, las=1)
plot(dat$MAT~dat$Eulaema_nigrita, las=1)
plot(dat$MAT,dat$Eulaema_nigrita, las=1)
rm(list=ls())
runif(1)
a=runif(100)
hist(a)
set.seed(1)
a=runif(100)
hist(a)
rnorm(100)
hist(b)
b=rnorm(100)
hist(b)
hist(a)
runMoran(6)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
runMoran(6)
a = rep('A',3)
a = rep('A',3)
a
b = a[a!='A']
b
length(b)
a[a!='A']
runMoran(6)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
length(b)
length(b)=0
print(length(b)=0)
print(length(b)==0)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
runMoran(4)
runMoran(6)
runMoran(4)
runMoran(4)
runMoran(4)
runMoran(4)
runMoran(4)
runMoran(4)
runMoran(4)
setwd("~/Documents/GitHub/BIOS14/GLM")
dat = read.csv("Eulaema.csv")
m=gml.nb(dat$MAT+dat$forest.,dat$Eulaema_nigrita)
m=glm.nb(dat$MAT+dat$forest.,dat$Eulaema_nigrita)
m=glm.nb(dat$Eulaema_nigrita~dat$MAT+dat$forest.)
summary(m)
m=glm.nb(dat$Eulaema_nigrita~dat$MAT+dat$forest.)
summary(m)
# m=glm.nb(dat$Eulaema_nigrita~dat$MAT+dat$forest.)
m = glm.nb(Eulaema_nigrita ~ MAP + forest., data = dat)
summary(m)
m=glm.nb(dat$Eulaema_nigrita~dat$MAT+dat$forest.)
summary(m)
# m=glm.nb(dat$Eulaema_nigrita~dat$MAT+dat$forest.)
m = glm.nb(Eulaema_nigrita ~ MAP + forest., data = dat)
summary(m)
plot(dat$forest.,dat$Eulaema_nigrita)
plot(dat$forest.,dat$Eulaema_nigrita)
newforest = seq(min(dat$forest.), max(dat$forest.), length.out=200)
newMAP = rep(min(dat$MAP), length(newforest))
newforest = seq(min(dat$forest.), max(dat$forest.), length.out=200)
newMAP = rep(min(dat$MAP), length(newforest))
y_hat = predict(m, newdata=list(MAP=newMAP,forest.=newforest), type='response')
lines(newforest, y_hat, lwd=2)
newforest
seq(1,2,length.out=4)
newMAP
source("~/Documents/GitHub/BIOS14/GLM/ExercisePossion.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
groupID = as.factor(rep(paste0("Group", 1:10), each=20))
source("~/.active-rstudio-document")
groupmeans
rm(list=ls())
source("~/.active-rstudio-document")
groupID
as.numeric(groupID)
plot(x1, y, las=1)
plot(x1, y,col=as.numeric(groupID), las=1)
source("~/.active-rstudio-document")
gropuID
groupID
plot(x1, y,col=as.numeric(groupID), las=1)
plot(x1, y,col=as.numeric(rep(1:10), each=20), las=1)
plot(x1, y,col=as.numeric(groupID), las=1)
plot(x1, y,col=as.numeric(rep(1:10),20), las=1)
plot(x1, y,col=as.numeric(groupID), las=1)
source("~/Documents/GitHub/BIOS13/untitled folder/runMoran.R")
runMoran(6)
library(glmmTMB)
data = data.frame(y, x1, groupID)
head(data)
m = glmmTMB(y ~ 1 + (1|groupID), data=data)
summary(m)
library(glmmTMB)
library(glmmTMB)
install.packages("glmmTMB", dependencies = FALSE)
library(glmmTMB)
library(glmmTMB)
data = data.frame(y, x1, groupID)
data = data.frame(y, x1, groupID)
library(glmmTMB)
library(glmmTMB)
install.packages("TMB", dependencies = FALSE)
library(glmmTMB)
library(glmmTMB)
m = glmmTMB(y ~ 1 + (1|groupID), data=data)
library(glmmTMB)
data = data.frame(y, x1, groupID)
head(data)
m = glmmTMB(y ~ 1 + (1|groupID), data=data)
summary(m)
VarCorr(m)
VarAmongGroups/(VarAmongGroups+VarWithinGroups)*100
VarAmongGroups = attr(VarCorr(m)$cond$groupID, "stddev")ˆ2
VarWithinGroups = attr(VarCorr(m)$cond, "sc")ˆ2
VarAmongGroups/(VarAmongGroups+VarWithinGroups)*100
VarCorr(m)
VarAmongGroups = attr(VarCorr(m)$cond$groupID, "stddev")ˆ2
VarWithinGroups = attr(VarCorr(m)$cond, "sc")ˆ2
VarAmongGroups = attr(VarCorr(m)$cond$groupID, "stddev")^2
VarWithinGroups = attr(VarCorr(m)$cond, "sc")^2
VarAmongGroups/(VarAmongGroups+VarWithinGroups)*100
